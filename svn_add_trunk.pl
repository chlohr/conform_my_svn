#!/usr/bin/env perl
use strict;
use warnings;

# --------------------------------------------------------------------
# add_svn_dirs_plain.pl
#
# Adds trunk tags and branches to revision 1 of an SVN dump
#
# Works both in pipeline mode:
#   cat dump.svn | perl add_svn_dirs_plain.pl > dump_fixed.svn
# or with input/output files:
#   perl add_svn_dirs_plain.pl dump_in.svn dump_out.svn
#
# Note: This simple code generated by ChatGPT is quite fragile and 
# assumes that the svn dump is in fairly good shape.  For more complex
# cases see SvnDumpTool <https://svn.borg.ch/svndumptool/> or similar.
# --------------------------------------------------------------------

# Read from file or STDIN
my ($infile, $outfile) = @ARGV;
my $input;
if (defined $infile) {
    open my $fh, '<:raw', $infile or die "Cannot open $infile: $!";
    local $/;
    $input = <$fh>;
    close $fh;
} else {
    binmode(STDIN);
    local $/;
    $input = <STDIN>;
}

# Locate revision 1
unless ($input =~ /^(Revision-number:\s*1\n.*?)(?=^Revision-number:|\z)/ms) {
    print STDERR "No revision 1 found in dump. No changes made.\n";
    print $input;
    exit 0;
}

my $rev1 = $1;

# Find existing Node-paths
my %existing;
while ($rev1 =~ /^Node-path:\s*(\S+)/mg) {
    $existing{$1} = 1;
}

# Determine which dirs to add
my @dirs = qw(trunk tags branches);
my @missing = grep { !$existing{$_} } @dirs;

if (!@missing) {
    print STDERR "All base directories already exist. No change made.\n";
    print $input;
    exit 0;
}

print STDERR "Adding missing directories: @missing\n";

# Build Node-* blocks for missing dirs
my $blocks = "";
for my $path (@missing) {
    $blocks .= <<"END_BLOCK";

Node-path: $path
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END

END_BLOCK
}

# Insert after PROPS-END in revision 1
my $modified = $input;
if ($modified =~ s/(^Revision-number:\s*1\n.*?PROPS-END\n)/$1\n$blocks/ms) {
    print STDERR "Directories inserted successfully.\n";
} else {
    print STDERR "Could not find insertion point (PROPS-END) in revision 1.\n";
}

# Output to file or STDOUT
if (defined $outfile) {
    open my $out, '>:raw', $outfile or die "Cannot write $outfile: $!";
    print $out $modified;
    close $out;
    print STDERR "Modified dump written to $outfile\n";
} else {
    binmode(STDOUT);
    print $modified;
}
